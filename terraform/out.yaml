NAME: jenkins-k8s
LAST DEPLOYED: Tue Aug  4 23:15:21 2020
NAMESPACE: default
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
additionalAgents: {}
agent:
  TTYEnabled: false
  alwaysPullImage: false
  args: ${computer.jnlpmac} ${computer.name}
  command: null
  componentName: jenkins-slave
  containerCap: 10
  customJenkinsLabels: []
  enabled: true
  envVars: []
  idleMinutes: 0
  image: jenkins/inbound-agent
  imagePullSecretName: null
  nodeSelector: {}
  podName: default
  podRetention: Never
  podTemplates: {}
  privileged: false
  resources:
    limits:
      cpu: 512m
      memory: 512Mi
    requests:
      cpu: 512m
      memory: 512Mi
  runAsGroup: null
  runAsUser: null
  sideContainerName: jnlp
  slaveConnectTimeout: 100
  tag: 4.3-4
  volumes: []
  workingDir: /home/jenkins
  yamlMergeStrategy: override
  yamlTemplate: ""
backup:
  annotations: {}
  componentName: backup
  destination: s3://jenkins-data/backup
  enabled: false
  env: []
  existingSecret: {}
  extraArgs: []
  image:
    repository: maorfr/kube-tasks
    tag: 0.2.0
  labels: {}
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 1
      memory: 1Gi
  schedule: 0 2 * * *
checkDeprecation: true
clusterZone: cluster.local
master:
  JCasC:
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: false
    configScripts:
      jenkins: |
        jenkins:
          agentProtocols:
          - "JNLP4-connect"
          - "Ping"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false
          clouds:
          - kubernetes:
              containerCap: 10
              containerCapStr: "10"
              jenkinsTunnel: "jenkins-k8s-agent:50000"
              jenkinsUrl: "http://jenkins-k8s:8080"
              maxRequestsPerHost: 32
              maxRequestsPerHostStr: "32"
              name: "kubernetes"
              namespace: "default"
              podLabels:
              - key: "jenkins/jenkins-k8s-jenkins-slave"
                value: "true"
              serverUrl: "https://kubernetes.default"
              templates:
              - containers:
                - args: "cat"
                  command: "/bin/sh -c"
                  image: "node"
                  livenessProbe:
                    failureThreshold: 0
                    initialDelaySeconds: 0
                    periodSeconds: 0
                    successThreshold: 0
                    timeoutSeconds: 0
                  name: "node"
                  ttyEnabled: true
                  workingDir: "/home/jenkins/agent"
                hostNetwork: false
                label: "jenkins-k8s-jenkins-slave "
                name: "default"
                nodeUsageMode: NORMAL
                podRetention: "never"
                serviceAccount: "default"
                yamlMergeStrategy: "override"
          crumbIssuer:
            standard:
              excludeClientIPFromCrumb: true
          disableRememberMe: false
          labelAtoms:
          - name: "jenkins-k8s-jenkins-slave"
          - name: "master"
          markupFormatter: "plainText"
          mode: NORMAL
          myViewsTabBar: "standard"
          numExecutors: 0
          primaryView:
            all:
              name: "all"
          projectNamingStrategy: "standard"
          quietPeriod: 5
          remotingSecurity:
            enabled: true
          scmCheckoutRetryCount: 0
          securityRealm: "legacy"
          slaveAgentPort: 50000
          updateCenter:
            sites:
            - id: "default"
              url: "https://updates.jenkins.io/update-center.json"
          views:
          - all:
              name: "all"
          viewsTabBar: "standard"
        security:
          apiToken:
            creationOfLegacyTokenEnabled: false
            tokenGenerationOnCreationEnabled: false
            usageStatisticsEnabled: true
          sSHD:
            port: -1
        unclassified:
          buildDiscarders:
            configuredBuildDiscarders:
            - "jobBuildDiscarder"
          defaultFolderConfiguration:
            healthMetrics:
            - worstChildHealthMetric:
                recursive: true
          gitSCM:
            createAccountBasedOnEmail: false
            showEntireCommitSummaryInChanges: false
            useExistingAccountWithSameEmail: false
          location:
            adminAddress: "address not configured yet <nobody@nowhere>"
            url: "http://jenkins-k8s:8080/"
          mailer:
            charset: "UTF-8"
            useSsl: false
            useTls: false
          pollSCM:
            pollingThreadCount: 10
        tool:
          git:
            installations:
            - home: "git"
              name: "Default"
      jobs: |
        jobs:
        - script: >
            pipeline {
            agent { label 'jenkins-k8s-jenkins-slave' }

          stages {
              stage('Code Checkout') {
                  steps {
                      git 'https://github.com/mendix/widgets-resources.git'
                  }
              }
              stage('Install dependencies') {
                  steps {
                      nodejs('node') {
                          sh "npm i"
                      }
                  }
              }
              stage('Build Package') {
                  steps {
                      nodejs('node') {
                          sh "npm run release"
                      }
                  }
              }
          }
          }
    defaultConfig: true
    enabled: true
    securityRealm: legacy
  additionalConfig: {}
  additionalPlugins:
  - nodejs:1.3.7
  admin:
    existingSecret: ""
    passwordKey: jenkins-admin-password
    userKey: jenkins-admin-user
  adminPassword: admin
  adminUser: admin
  authorizationStrategy: |-
    <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
      <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
    </authorizationStrategy>
  backendconfig:
    annotations: {}
    apiVersion: extensions/v1beta1
    enabled: false
    labels: {}
    name: null
    spec: {}
  cli: false
  componentName: jenkins-master
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  customConfigMap: false
  customInitContainers: []
  customJenkinsLabels: []
  deploymentAnnotations: {}
  deploymentLabels: {}
  disableRememberMe: false
  disabledAgentProtocols:
  - JNLP-connect
  - JNLP2-connect
  enableRawHtmlMarkupFormatter: false
  enableXmlConfig: false
  executorMode: NORMAL
  extraPorts: []
  fsGroup: 1000
  healthProbeLivenessFailureThreshold: 5
  healthProbeLivenessInitialDelay: 90
  healthProbeLivenessPeriodSeconds: 10
  healthProbeReadinessFailureThreshold: 3
  healthProbeReadinessInitialDelay: 60
  healthProbeReadinessPeriodSeconds: 10
  healthProbes: true
  healthProbesLivenessTimeout: 5
  healthProbesReadinessTimeout: 5
  hostAliases: []
  hostNetworking: false
  httpsKeyStore:
    enable: false
    fileName: keystore.jks
    httpPort: 8081
    jenkinsHttpsJksSecretName: ""
    jenkinsKeyStoreBase64Encoded: |
      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
    password: password
    path: /var/jenkins_keystore
  image: jenkins/jenkins
  imagePullPolicy: Always
  imagePullSecretName: null
  ingress:
    annotations: {}
    apiVersion: extensions/v1beta1
    enabled: false
    hostName: null
    labels: {}
    paths: []
    tls: null
  initScripts: []
  initializeOnce: false
  installPlugins:
  - kubernetes:1.25.7
  - workflow-job:2.39
  - workflow-aggregator:2.6
  - credentials-binding:1.23
  - git:4.2.2
  - configuration-as-code:1.41
  jenkinsHome: /var/jenkins_home
  jenkinsRef: /usr/share/jenkins/ref
  jobs: {}
  lifecycle: null
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  markupFormatter: plainText
  nodeSelector: {}
  numExecutors: 0
  overwriteConfig: false
  overwriteJobs: false
  overwritePluginsFromImage: true
  podAnnotations: {}
  podLabels: {}
  prometheus:
    alertingRulesAdditionalLabels: {}
    alertingrules: []
    enabled: false
    scrapeEndpoint: /prometheus
    scrapeInterval: 60s
    serviceMonitorAdditionalLabels: {}
  resources:
    limits:
      cpu: 2000m
      memory: 4096Mi
    requests:
      cpu: 100m
      memory: 512Mi
  rollingUpdate: {}
  route:
    annotations: {}
    enabled: false
    labels: {}
  runAsUser: 1000
  scriptApproval: []
  securityRealm: <securityRealm class="hudson.security.LegacySecurityRealm"/>
  serviceAnnotations: {}
  serviceLabels: {}
  servicePort: 8080
  serviceType: LoadBalancer
  sidecars:
    configAutoReload:
      enabled: true
      folder: /var/jenkins_home/casc_configs
      image: kiwigrid/k8s-sidecar:0.1.144
      imagePullPolicy: IfNotPresent
      reqRetryConnect: 10
      resources: {}
      sshTcpPort: 1044
    other: []
  slaveConnectTimeout: 5
  slaveDefaultsProviderTemplate: ""
  slaveHostPort: null
  slaveJenkinsTunnel: null
  slaveJenkinsUrl: null
  slaveKubernetesNamespace: null
  slaveListenerPort: 50000
  slaveListenerServiceAnnotations: {}
  slaveListenerServiceType: ClusterIP
  slaveReadTimeout: 15
  tag: lts
  targetPort: 8080
  terminationGracePeriodSeconds: null
  testEnabled: true
  tolerations: []
  usePodSecurityContext: true
  useSecurity: true
networkPolicy:
  apiVersion: networking.k8s.io/v1
  enabled: false
  externalAgents: {}
  internalAgents:
    allowed: true
    namespaceLabels: {}
    podLabels: {}
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  enabled: true
  existingClaim: null
  mounts: null
  size: 8Gi
  storageClass: null
  volumes: null
rbac:
  create: true
  readSecrets: false
serviceAccount:
  annotations: {}
  create: true
  name: null
serviceAccountAgent:
  annotations: {}
  create: false
  name: null

HOOKS:
---
# Source: jenkins/templates/tests/jenkins-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "jenkins-k8s-ui-test-f38ew"
  namespace: default
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: "test-framework"
      image: "dduportal/bats:0.4.0"
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: jenkins-k8s-ui-test
      image: jenkins/jenkins:lts
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: jenkins-k8s-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
MANIFEST:
---
# Source: jenkins/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-k8s
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
---
# Source: jenkins/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-k8s
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
type: Opaque
data:
  jenkins-admin-password: "YWRtaW4="
  jenkins-admin-user: "YWRtaW4="
---
# Source: jenkins/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-k8s
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
data:
  apply_config.sh: |-
    echo "applying Jenkins configuration"
    mkdir -p /usr/share/jenkins/ref/secrets/;
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > /var/jenkins_home/jenkins.install.InstallUtil.lastExecVersion
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
    echo "finished initialization"
  plugins.txt: |-
    kubernetes:1.25.7
    workflow-job:2.39
    workflow-aggregator:2.6
    credentials-binding:1.23
    git:4.2.2
    configuration-as-code:1.41
    nodejs:1.3.7
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-k8s-jenkins-config-jenkins
  namespace: default
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": jenkins-2.5.0
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
    jenkins-k8s-jenkins-config: "true"
data:
  jenkins.yaml: |-
    jenkins:
      agentProtocols:
      - "JNLP4-connect"
      - "Ping"
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      clouds:
      - kubernetes:
          containerCap: 10
          containerCapStr: "10"
          jenkinsTunnel: "jenkins-k8s-agent:50000"
          jenkinsUrl: "http://jenkins-k8s:8080"
          maxRequestsPerHost: 32
          maxRequestsPerHostStr: "32"
          name: "kubernetes"
          namespace: "default"
          podLabels:
          - key: "jenkins/jenkins-k8s-jenkins-slave"
            value: "true"
          serverUrl: "https://kubernetes.default"
          templates:
          - containers:
            - args: "cat"
              command: "/bin/sh -c"
              image: "node"
              livenessProbe:
                failureThreshold: 0
                initialDelaySeconds: 0
                periodSeconds: 0
                successThreshold: 0
                timeoutSeconds: 0
              name: "node"
              ttyEnabled: true
              workingDir: "/home/jenkins/agent"
            hostNetwork: false
            label: "jenkins-k8s-jenkins-slave "
            name: "default"
            nodeUsageMode: NORMAL
            podRetention: "never"
            serviceAccount: "default"
            yamlMergeStrategy: "override"
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
      disableRememberMe: false
      labelAtoms:
      - name: "jenkins-k8s-jenkins-slave"
      - name: "master"
      markupFormatter: "plainText"
      mode: NORMAL
      myViewsTabBar: "standard"
      numExecutors: 0
      primaryView:
        all:
          name: "all"
      projectNamingStrategy: "standard"
      quietPeriod: 5
      remotingSecurity:
        enabled: true
      scmCheckoutRetryCount: 0
      securityRealm: "legacy"
      slaveAgentPort: 50000
      updateCenter:
        sites:
        - id: "default"
          url: "https://updates.jenkins.io/update-center.json"
      views:
      - all:
          name: "all"
      viewsTabBar: "standard"
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
      sSHD:
        port: -1
    unclassified:
      buildDiscarders:
        configuredBuildDiscarders:
        - "jobBuildDiscarder"
      defaultFolderConfiguration:
        healthMetrics:
        - worstChildHealthMetric:
            recursive: true
      gitSCM:
        createAccountBasedOnEmail: false
        showEntireCommitSummaryInChanges: false
        useExistingAccountWithSameEmail: false
      location:
        adminAddress: "address not configured yet <nobody@nowhere>"
        url: "http://jenkins-k8s:8080/"
      mailer:
        charset: "UTF-8"
        useSsl: false
        useTls: false
      pollSCM:
        pollingThreadCount: 10
    tool:
      git:
        installations:
        - home: "git"
          name: "Default"
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-k8s-jenkins-config-jobs
  namespace: default
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": jenkins-2.5.0
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
    jenkins-k8s-jenkins-config: "true"
data:
  jobs.yaml: |-
    jobs:
    - script: >
        pipeline {
        agent { label 'jenkins-k8s-jenkins-slave' }
    
      stages {
          stage('Code Checkout') {
              steps {
                  git 'https://github.com/mendix/widgets-resources.git'
              }
          }
          stage('Install dependencies') {
              steps {
                  nodejs('node') {
                      sh "npm i"
                  }
              }
          }
          stage('Build Package') {
              steps {
                  nodejs('node') {
                      sh "npm run release"
                  }
              }
          }
      }
      }
---
# Source: jenkins/templates/jcasc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-k8s-jenkins-jcasc-config
  namespace: default
  labels:
    "app.kubernetes.io/name": jenkins
    "helm.sh/chart": jenkins-2.5.0
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
    jenkins-k8s-jenkins-config: "true"
data:
  jcasc-default-config.yaml: |-
    jenkins:
      disableRememberMe: false
      remotingSecurity:
        enabled: true
      mode: NORMAL
      numExecutors: 0
      projectNamingStrategy: "standard"
      markupFormatter:
        plainText
      clouds:
      - kubernetes:
          containerCapStr: "10"
          defaultsProviderTemplate: ""
          connectTimeout: "5"
          readTimeout: "15"
          jenkinsUrl: "http://jenkins-k8s:8080"
          jenkinsTunnel: "jenkins-k8s-agent:50000"
          maxRequestsPerHostStr: "32"
          name: "kubernetes"
          namespace: "default"
          serverUrl: "https://kubernetes.default"
          podLabels:
          - key: "jenkins/jenkins-k8s-jenkins-slave"
            value: "true"
          templates:
            - name: "default"
              containers:
              - name: "jnlp"
                alwaysPullImage: false
                args: "^${computer.jnlpmac} ^${computer.name}"
                envVars:
                - containerEnvVar:
                    key: "JENKINS_URL"
                    value: "http://jenkins-k8s.default.svc.cluster.local:8080"
                image: "jenkins/inbound-agent:4.3-4"
                privileged: "false"
                resourceLimitCpu: 512m
                resourceLimitMemory: 512Mi
                resourceRequestCpu: 512m
                resourceRequestMemory: 512Mi
                runAsUser: 
                runAsGroup: 
                ttyEnabled: false
                workingDir: /home/jenkins
              idleMinutes: 0
              instanceCap: 2147483647
              label: "jenkins-k8s-jenkins-slave "
              nodeUsageMode: "NORMAL"
              podRetention: Never
              showRawYaml: true
              serviceAccount: "default"
              slaveConnectTimeoutStr: "100"
              yamlMergeStrategy: override
      crumbIssuer:
        standard:
          excludeClientIPFromCrumb: true
    security:
      apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true
    unclassified:
      location:
        adminAddress: 
        url: http://jenkins-k8s:8080
---
# Source: jenkins/templates/tests/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-k8s-tests
  namespace: default
data:
  run.sh: |-
    @test "Testing Jenkins UI is accessible" {
      curl --retry 48 --retry-delay 10 jenkins-k8s:8080/login
    }
---
# Source: jenkins/templates/home-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins-k8s
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: jenkins/templates/rbac.yaml
# This role is used to allow Jenkins scheduling of agents via Kubernetes plugin.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-k8s-schedule-agents
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods", "pods/exec", "persistentvolumeclaims"]
  verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: jenkins/templates/rbac.yaml
# The sidecar container which is responsible for reloading configuration changes
# needs permissions to watch ConfigMaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-k8s-casc-reload
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]
---
# Source: jenkins/templates/rbac.yaml
# We bind the role to the Jenkins service account. The role binding is created in the namespace
# where the agents are supposed to run.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-k8s-schedule-agents
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-k8s-schedule-agents
subjects:
- kind: ServiceAccount
  name: jenkins-k8s
  namespace: default
---
# Source: jenkins/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-k8s-watch-configmaps
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-k8s-casc-reload
subjects:
- kind: ServiceAccount
  name: jenkins-k8s
  namespace: default
---
# Source: jenkins/templates/jenkins-agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins-k8s-agent
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
spec:
  ports:
    - port: 50000
      targetPort: 50000
      
      name: slavelistener
  selector:
    "app.kubernetes.io/component": "jenkins-master"
    "app.kubernetes.io/instance": "jenkins-k8s"
  type: ClusterIP
---
# Source: jenkins/templates/jenkins-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jenkins-k8s
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
  selector:
    "app.kubernetes.io/component": "jenkins-master"
    "app.kubernetes.io/instance": "jenkins-k8s"
  type: LoadBalancer
  
  loadBalancerSourceRanges:
    - 0.0.0.0/0
---
# Source: jenkins/templates/jenkins-master-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-k8s
  namespace: default
  labels:
    "app.kubernetes.io/name": 'jenkins'
    "helm.sh/chart": "jenkins-2.5.0"
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "jenkins-k8s"
    "app.kubernetes.io/component": "jenkins-master"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      "app.kubernetes.io/component": "jenkins-master"
      "app.kubernetes.io/instance": "jenkins-k8s"
  template:
    metadata:
      labels:
        "app.kubernetes.io/name": 'jenkins'
        "helm.sh/chart": "jenkins-2.5.0"
        "app.kubernetes.io/managed-by": "Helm"
        "app.kubernetes.io/instance": "jenkins-k8s"
        "app.kubernetes.io/component": "jenkins-master"
      annotations:
        checksum/config: e5455ca56a6dd8ed178d2d5c5f524332290477c426ca380a83d91bc2bef80983
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: "jenkins-k8s"
      initContainers:
        - name: "copy-default-config"
          image: "jenkins/jenkins:lts"
          imagePullPolicy: "Always"
          command: [ "sh", "/var/jenkins_config/apply_config.sh" ]
          env:
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jenkins-k8s
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jenkins-k8s
                  key: jenkins-admin-user
          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/jenkins_home
              name: jenkins-home
            - mountPath: /var/jenkins_config
              name: jenkins-config
            - mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
            - mountPath: /usr/share/jenkins/ref/plugins
              name: plugins
            - mountPath: /var/jenkins_plugins
              name: plugin-dir
      containers:
        - name: jenkins
          image: "jenkins/jenkins:lts"
          imagePullPolicy: "Always"
          args: [ "--argumentsRealm.passwd.$(ADMIN_USER)=$(ADMIN_PASSWORD)",  "--argumentsRealm.roles.$(ADMIN_USER)=admin", "--httpPort=8080"]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_OPTS
              value: >
                
                 -Dcasc.reload.token=$(POD_NAME) 
            - name: JENKINS_OPTS
              value: ""
            - name: JENKINS_SLAVE_AGENT_PORT
              value: "50000"
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jenkins-k8s
                  key: jenkins-admin-password
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jenkins-k8s
                  key: jenkins-admin-user
            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
              name: slavelistener
          livenessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          resources:
            limits:
              cpu: 2000m
              memory: 4096Mi
            requests:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/jenkins_home
              name: jenkins-home
              readOnly: false
            - mountPath: /var/jenkins_config
              name: jenkins-config
              readOnly: true
            - mountPath: /usr/share/jenkins/ref/secrets/
              name: secrets-dir
              readOnly: false
            - mountPath: /usr/share/jenkins/ref/plugins/
              name: plugin-dir
              readOnly: false
            - name: sc-config-volume
              mountPath: /var/jenkins_home/casc_configs
        - name: jenkins-sc-config
          image: "kiwigrid/k8s-sidecar:0.1.144"
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LABEL
              value: "jenkins-k8s-jenkins-config"
            - name: FOLDER
              value: "/var/jenkins_home/casc_configs"
            - name: NAMESPACE
              value: "default"
            - name: REQ_URL
              value: "http://localhost:8080/reload-configuration-as-code/?casc-reload-token=$(POD_NAME)"
            - name: REQ_METHOD
              value: "POST"
            - name: REQ_RETRY_CONNECT
              value: "10"
          resources:
            {}
          volumeMounts:
            - name: sc-config-volume
              mountPath: "/var/jenkins_home/casc_configs"
            - name: jenkins-home
              mountPath: /var/jenkins_home

      volumes:
      - name: plugins
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: jenkins-config
        configMap:
          name: jenkins-k8s
      - name: secrets-dir
        emptyDir: {}
      - name: plugin-dir
        emptyDir: {}
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: jenkins-k8s
      - name: sc-config-volume
        emptyDir: {}

NOTES:
1. Get your 'admin' user password by running:
  printf $(kubectl get secret --namespace default jenkins-k8s -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo
2. Get the Jenkins URL to visit by running these commands in the same shell:
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        You can watch the status of by running 'kubectl get svc --namespace default -w jenkins-k8s'
  export SERVICE_IP=$(kubectl get svc --namespace default jenkins-k8s --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
  echo http://$SERVICE_IP:8080/login

3. Login with the password from step 1 and the username: admin

4. Use Jenkins Configuration as Code by specifying configScripts in your values.yaml file, see documentation: http:///configuration-as-code and examples: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos

For more information on running Jenkins on Kubernetes, visit:
https://cloud.google.com/solutions/jenkins-on-container-engine
For more information about Jenkins Configuration as Code, visit:
https://jenkins.io/projects/jcasc/
